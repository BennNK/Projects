//核磁共振裂分峰解析工具
#include <iostream>
#include <mem.h>
#include <stdlib.h>
#include <cmath>

using namespace std;

const int MAXNUM=1000;

struct a_heap
{
    double array[MAXNUM];
    int left;
    int right;
    int is_valid[MAXNUM];
}heap;

struct peak
{
    double delta;
    int height;
};


peak input[64];
double peak_height_1[64];
double temp_store[1000];

//void gcd()

void analyze(a_heap& object)//分析函数
{
    while(object.left!=object.right)//替代递归的循环
    {

    int i,j,k,length_of_level=object.right-object.left+1,i_for_temp;//一趟递归
    double distance;

    for(i=1;i<=object.right-object.left;i++)//i代表步长，从1开始
    {
        memset(temp_store,0,sizeof(double));
        i_for_temp=0;

        for(j=object.left;j<=object.right;j++)
        {
            object.is_valid[j]=0;//重新定义步长时，把层中所有元素重设为未访问过
        }

        j=object.left;

        //if(i==1)
        //j=object.left+2;//j为扫描距离是否合理的计数器
        //else j=object.left+1;

        distance=object.array[object.left+i]-object.array[object.left];
        //cout<<distance<<endl;
        //for(;j+i<=object.right;j++)
        while(j<=object.right)//贪心法算出最佳步长
        {
            if(object.is_valid[j]==1)
            {
                j++;
                continue;
            }


            for(k=j+i;k<=object.right;)//固定j，从j的右面开始寻找合法位置
            {
                if(object.is_valid[k]==1)
                {
                    k++;
                    continue;
                }

                if(object.is_valid[j]==0&&object.is_valid[k]==0&&abs(object.array[k]-object.array[j]-distance)<(distance/10))
                {
                    object.is_valid[j]=1;
                    object.is_valid[k]=1;
                    temp_store[i_for_temp]=(object.array[j]+object.array[k])/2;
                    i_for_temp++;
                    break;
                }
                else
                {
                    k++;
                    continue;
                }
            }

            j++;

        }

        for(j=object.left;j<=object.right;j++)//判断heap的一层中的元素的距离是否全部合法
        {
            if(object.is_valid[j]==0)
             break;
        }

        if(j==object.right+1) //步长合理
        {
            cout<<distance<<endl;
            break;
        }


        //输出耦合常数，进入下一次递归

     }

        object.right=object.left-1;
        object.left=object.right+1-length_of_level/2;

        for(i=object.left,i_for_temp=0;i<=object.right;i++,i_for_temp++)
        {
            object.array[i]=temp_store[i_for_temp];
        }

        memset(temp_store,0,sizeof(double));

        //if(object.right==object.left)
        {
            //system("pause");
        }

    }


}


int main()
{
    int i,peaknumber,height,j,number_of_split,temp;

    cin>>peaknumber;//输入峰数

    for(i=0;i<peaknumber;i++)
    {
        cin>>input[i].delta>>input[i].height;//输入每个峰的位移和强度，存入顺序表
    }

    for(i=0,j=0;i<peaknumber;i++)
    {
        temp=j;
        for(;j<temp+input[i].height;j++)
        {
            peak_height_1[j]=input[i].delta;
        }
    }

    //i=0;

    //while(i<peaknumber-1)
    {
       // for(j=i;j<i+input[i].height;j++)
        {
      //      peak_height_1[j]=input[i].delta;//将强度为n的峰转化为n个强度为1的峰，其位移值存入另一个顺序表
        }
      //  i++;
    }
   // peak_height_1[j]=input[i].delta;

    number_of_split=0;

    for(i=0;i<peaknumber;i++)
    {
        number_of_split+=input[i].height;//计算强度为1的峰的数目
    }

    j=0;

//for(i=0;i<number_of_split;i++) cout<<peak_height_1[i];


    for(i=MAXNUM-number_of_split;i<MAXNUM;i++,j++)
    {
        heap.array[i]=peak_height_1[j];//将最底层峰的位移数据存入堆的叶节点上
    }
    heap.left=MAXNUM-number_of_split;
    heap.right=MAXNUM-1;


    for(i=0;i<MAXNUM;i++)
    {
        heap.is_valid[i]=0;//将峰的初始判断值设为未访问
    }

//for(i=MAXNUM-number_of_split;i<MAXNUM;i++) cout<<heap.is_valid[i];
//for(i=0;i<MAXNUM;i++) cout<<heap.is_valid[i];

    analyze(heap);//用递归法分析位移数据，得出每一层的偶合常数


    return (0);

}
